{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Feature Selection.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**Important Imports**"
      ],
      "metadata": {
        "id": "r4pAXcs6LlN4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "m226Nb7q6RS7"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q740QGvcKthI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "09c7b15b-3cf3-4e7b-e4da-497f3be516ad"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: mlxtend in /usr/local/lib/python3.7/dist-packages (0.14.0)\n",
            "Requirement already satisfied: matplotlib>=1.5.1 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (3.2.2)\n",
            "Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (1.0.2)\n",
            "Requirement already satisfied: pandas>=0.17.1 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (1.3.5)\n",
            "Requirement already satisfied: numpy>=1.10.4 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (1.21.5)\n",
            "Requirement already satisfied: scipy>=0.17 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (1.4.1)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from mlxtend) (57.4.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->mlxtend) (0.11.0)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->mlxtend) (2.8.2)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->mlxtend) (1.4.2)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->mlxtend) (3.0.8)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib>=1.5.1->mlxtend) (4.1.1)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.17.1->mlxtend) (2018.9)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib>=1.5.1->mlxtend) (1.15.0)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.18->mlxtend) (1.1.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.18->mlxtend) (3.1.0)\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "%matplotlib inline\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_selection import VarianceThreshold\n",
        "\n",
        "from sklearn import preprocessing\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import roc_auc_score\n",
        "import sklearn.metrics as metrics\n",
        "\n",
        "!pip install mlxtend\n",
        "import joblib\n",
        "import sys\n",
        "sys.modules['sklearn.externals.joblib'] = joblib\n",
        "from mlxtend.feature_selection import SequentialFeatureSelector as SFS\n",
        "\n",
        "import statsmodels.api as sm"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Load the Maternal Health Risk dataset"
      ],
      "metadata": {
        "id": "LhLGZ4iHLxpV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('MaternalHealthRisk.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "rKbxrzBHL3GS",
        "outputId": "6d8d741f-8d22-4f88-84f6-39b301626299"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Age  WeightKG  SystolicBP  DiastolicBP    BS  HeartRate  \\\n",
              "0      25      71.6         130           80  15.0         86   \n",
              "1      35      86.4         140           90  13.0         70   \n",
              "2      29      57.3          90           70   8.0         80   \n",
              "3      30      81.0         140           85   7.0         70   \n",
              "4      35      47.7         120           60   6.1         76   \n",
              "...   ...       ...         ...          ...   ...        ...   \n",
              "1009   22      61.8         120           60  15.0         80   \n",
              "1010   55      50.8         120           90  18.0         60   \n",
              "1011   35      81.2          85           60  19.0         86   \n",
              "1012   43      58.1         120           90  18.0         70   \n",
              "1013   32      53.5         120           65   6.0         76   \n",
              "\n",
              "      Blood_oxygen_level  BodyTemp_F  BodyTemp_C  RiskLevel  \n",
              "0                     91        98.0        36.7  high risk  \n",
              "1                     96        98.0        36.7  high risk  \n",
              "2                     98       100.0        37.8  high risk  \n",
              "3                     94        98.0        36.7  high risk  \n",
              "4                     98        98.0        36.7   low risk  \n",
              "...                  ...         ...         ...        ...  \n",
              "1009                  99        98.0        36.7  high risk  \n",
              "1010                  92        98.0        36.7  high risk  \n",
              "1011                  91        98.0        36.7  high risk  \n",
              "1012                  96        98.0        36.7  high risk  \n",
              "1013                  94       101.0        38.3   mid risk  \n",
              "\n",
              "[1014 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8fea0ae6-84f7-4cd7-a6e6-35ad7b116da9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>WeightKG</th>\n",
              "      <th>SystolicBP</th>\n",
              "      <th>DiastolicBP</th>\n",
              "      <th>BS</th>\n",
              "      <th>HeartRate</th>\n",
              "      <th>Blood_oxygen_level</th>\n",
              "      <th>BodyTemp_F</th>\n",
              "      <th>BodyTemp_C</th>\n",
              "      <th>RiskLevel</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>25</td>\n",
              "      <td>71.6</td>\n",
              "      <td>130</td>\n",
              "      <td>80</td>\n",
              "      <td>15.0</td>\n",
              "      <td>86</td>\n",
              "      <td>91</td>\n",
              "      <td>98.0</td>\n",
              "      <td>36.7</td>\n",
              "      <td>high risk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>35</td>\n",
              "      <td>86.4</td>\n",
              "      <td>140</td>\n",
              "      <td>90</td>\n",
              "      <td>13.0</td>\n",
              "      <td>70</td>\n",
              "      <td>96</td>\n",
              "      <td>98.0</td>\n",
              "      <td>36.7</td>\n",
              "      <td>high risk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>29</td>\n",
              "      <td>57.3</td>\n",
              "      <td>90</td>\n",
              "      <td>70</td>\n",
              "      <td>8.0</td>\n",
              "      <td>80</td>\n",
              "      <td>98</td>\n",
              "      <td>100.0</td>\n",
              "      <td>37.8</td>\n",
              "      <td>high risk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>30</td>\n",
              "      <td>81.0</td>\n",
              "      <td>140</td>\n",
              "      <td>85</td>\n",
              "      <td>7.0</td>\n",
              "      <td>70</td>\n",
              "      <td>94</td>\n",
              "      <td>98.0</td>\n",
              "      <td>36.7</td>\n",
              "      <td>high risk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>35</td>\n",
              "      <td>47.7</td>\n",
              "      <td>120</td>\n",
              "      <td>60</td>\n",
              "      <td>6.1</td>\n",
              "      <td>76</td>\n",
              "      <td>98</td>\n",
              "      <td>98.0</td>\n",
              "      <td>36.7</td>\n",
              "      <td>low risk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1009</th>\n",
              "      <td>22</td>\n",
              "      <td>61.8</td>\n",
              "      <td>120</td>\n",
              "      <td>60</td>\n",
              "      <td>15.0</td>\n",
              "      <td>80</td>\n",
              "      <td>99</td>\n",
              "      <td>98.0</td>\n",
              "      <td>36.7</td>\n",
              "      <td>high risk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1010</th>\n",
              "      <td>55</td>\n",
              "      <td>50.8</td>\n",
              "      <td>120</td>\n",
              "      <td>90</td>\n",
              "      <td>18.0</td>\n",
              "      <td>60</td>\n",
              "      <td>92</td>\n",
              "      <td>98.0</td>\n",
              "      <td>36.7</td>\n",
              "      <td>high risk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1011</th>\n",
              "      <td>35</td>\n",
              "      <td>81.2</td>\n",
              "      <td>85</td>\n",
              "      <td>60</td>\n",
              "      <td>19.0</td>\n",
              "      <td>86</td>\n",
              "      <td>91</td>\n",
              "      <td>98.0</td>\n",
              "      <td>36.7</td>\n",
              "      <td>high risk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1012</th>\n",
              "      <td>43</td>\n",
              "      <td>58.1</td>\n",
              "      <td>120</td>\n",
              "      <td>90</td>\n",
              "      <td>18.0</td>\n",
              "      <td>70</td>\n",
              "      <td>96</td>\n",
              "      <td>98.0</td>\n",
              "      <td>36.7</td>\n",
              "      <td>high risk</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1013</th>\n",
              "      <td>32</td>\n",
              "      <td>53.5</td>\n",
              "      <td>120</td>\n",
              "      <td>65</td>\n",
              "      <td>6.0</td>\n",
              "      <td>76</td>\n",
              "      <td>94</td>\n",
              "      <td>101.0</td>\n",
              "      <td>38.3</td>\n",
              "      <td>mid risk</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1014 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8fea0ae6-84f7-4cd7-a6e6-35ad7b116da9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8fea0ae6-84f7-4cd7-a6e6-35ad7b116da9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8fea0ae6-84f7-4cd7-a6e6-35ad7b116da9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Change **\"Risk Level\"** (High Risk, Mid Risk, Low Risk) to (3,2,1) respectively .  "
      ],
      "metadata": {
        "id": "hzBkumuoOnLo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['RiskLevel'].unique()\n"
      ],
      "metadata": {
        "id": "3QeMq81eO1iX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "27cc887f-b52b-49f6-de5c-ac68fe85008c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['high risk', 'low risk', 'mid risk'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Risk_Level_dict = {'high risk':3,'mid risk':2,'low risk':1}\n",
        "\n",
        "df['RiskLevel']= df.RiskLevel.map(Risk_Level_dict)\n",
        "df['RiskLevel'].unique()"
      ],
      "metadata": {
        "id": "6HcPaNhgPfvq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4f49bac3-46b2-4683-c307-224255a0940a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([3, 1, 2])"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Separate dataset into **Train** and **Test**"
      ],
      "metadata": {
        "id": "GQgix5VWMQjh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating X variable with all the features except Risk Level\n",
        "X = df.drop('RiskLevel',axis=1)\n",
        "X.shape"
      ],
      "metadata": {
        "id": "pG7W6qTaMVZO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ff8cf106-3231-42c2-9dee-54e5a2d95987"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1014, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating y variable with feature as Risk Level \n",
        "y = df['RiskLevel']\n",
        "y.shape"
      ],
      "metadata": {
        "id": "mSzA6hhbSWLs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8843f695-f423-405b-9878-9a22aa470b91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1014,)"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)\n",
        "print(\"X_train Shape: \")\n",
        "print(X_train.shape)\n",
        "print(\"X_test Shape: \")\n",
        "print(X_test.shape)\n",
        "print(\"y_train Shape: \")\n",
        "print(y_train.shape)\n",
        "print(\"y_test Shape: \")\n",
        "print(y_test.shape)"
      ],
      "metadata": {
        "id": "-if2aw9OSfbB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "df6acf76-937b-4fb2-9388-156c681524f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train Shape: \n",
            "(709, 9)\n",
            "X_test Shape: \n",
            "(305, 9)\n",
            "y_train Shape: \n",
            "(709,)\n",
            "y_test Shape: \n",
            "(305,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Storing a copy of X_train and X_test to measure the performance of machine learning models at the end"
      ],
      "metadata": {
        "id": "PlrkP9AyUOeL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_original = X_train.copy()\n",
        "X_test_original = X_test.copy()\n"
      ],
      "metadata": {
        "id": "EJbqxieNUcx3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data Processing: Remove constant features"
      ],
      "metadata": {
        "id": "pVRrdcZ6UvEf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Data Processing might not change the dataset but it should be done for good practice in feature selection.\n",
        "const_feat = [\n",
        "    feat for feat in X_train.columns if X_train[feat].std() == 0\n",
        "]\n",
        "print(\"Before\")\n",
        "print(X_train.shape, X_test.shape)\n",
        "X_train.drop(labels=const_feat, axis=1, inplace=True)\n",
        "X_test.drop(labels=const_feat, axis=1, inplace=True)\n",
        "print(\"After\")\n",
        "print(X_train.shape, X_test.shape)"
      ],
      "metadata": {
        "id": "0FnZbf14Uuz8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a00a1102-dcaa-471c-e82c-6db04286296d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Before\n",
            "(709, 9) (305, 9)\n",
            "After\n",
            "(709, 9) (305, 9)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Remove Quasi-Constant features"
      ],
      "metadata": {
        "id": "E_vdV2m6WB6o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sel = VarianceThreshold(threshold=0.01)\n",
        "sel.fit(X_train)\n",
        "sum(sel.get_support()) \n",
        "# 9 features in X_train"
      ],
      "metadata": {
        "id": "ltryY1moWG-q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f1edb7ab-be8a-4016-a3be-ae76ebf03fa7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = sel.transform(X_train)\n",
        "X_test = sel.transform(X_test)\n",
        "\n",
        "X_train.shape, X_test.shape"
      ],
      "metadata": {
        "id": "MEXwWExzXNnI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fce8103f-b33a-4bae-9f91-334e3e003303"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((709, 9), (305, 9))"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Transforming the arrays back to dataframes because\n",
        "# sklearn transformation lead to numpy arrays\n",
        "X_train= pd.DataFrame(X_train)\n",
        "X_test= pd.DataFrame(X_test)\n"
      ],
      "metadata": {
        "id": "8D3Hzp_OXVPt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Remove duplicated features"
      ],
      "metadata": {
        "id": "aYqO0_KdYANj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "duplicated_feat = []\n",
        "for i in range(0, len(X_train.columns)):\n",
        "    if i % 10 == 0: \n",
        "        print(i)\n",
        "\n",
        "    col_1 = X_train.columns[i]\n",
        "\n",
        "    for col_2 in X_train.columns[i + 1:]:\n",
        "        if X_train[col_1].equals(X_train[col_2]):\n",
        "            duplicated_feat.append(col_2)\n",
        "            \n",
        "len(duplicated_feat)\n",
        "\n",
        "if(len(duplicated_feat)==0):\n",
        "    print(\"no duplicated features\")\n"
      ],
      "metadata": {
        "id": "QFc0reGwYDVY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bd1ba9bb-4e8e-490a-deeb-bff65d23591b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "no duplicated features\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Feature Selection using **Correlation Coefficient**"
      ],
      "metadata": {
        "id": "M-1kZSFnY85A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def correlation(dataset, threshold):\n",
        "    col_corr = list()  # Set of all the names of correlated columns\n",
        "    corr_matrix = dataset.corr()\n",
        "    for i in range(len(corr_matrix.columns)):\n",
        "        for j in range(i):\n",
        "            if abs(corr_matrix.iloc[i, j]) > threshold: # we are interested in absolute coeff value\n",
        "                colname = corr_matrix.columns[i]  # getting the name of column\n",
        "                col_corr.append(colname)\n",
        "    return col_corr\n",
        "\n",
        "corr_features = correlation(X_train, 0.8)\n",
        "print('correlated features are : ', list(df.columns)[corr_features[0]])"
      ],
      "metadata": {
        "id": "7kZf-98AY8lH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "de7b85bd-93ce-4f20-dd3f-f5ebbf8de035"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "correlated features are :  BodyTemp_C\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plot of Correlation Coefficient Matrix"
      ],
      "metadata": {
        "id": "UE0oGC3jst1J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cor = df.corr()\n",
        "plt.figure(figsize = (10,6))\n",
        "sns.heatmap(cor, annot = True)"
      ],
      "metadata": {
        "id": "r0Kc-QZkZHlO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 483
        },
        "outputId": "a6d6f0b5-06ec-412e-f13f-e8022276821f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f7de6a10ad0>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As we can see from the matrix that bodyTemp_F is correlated with BodyTemp_C therefore BodyTemp_C is dropped."
      ],
      "metadata": {
        "id": "MaDx16CZtK30"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# copying and and changing w.r.t chi2 result\n",
        "X_train_corr = X_train.copy()\n",
        "X_test_corr = X_test.copy()\n",
        "X_train_corr.drop(labels=corr_features, axis=1, inplace=True)\n",
        "X_test_corr.drop(labels=corr_features, axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "mVmlH6JtZL8m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Feature Selection using **Information Gain**"
      ],
      "metadata": {
        "id": "mODZXjjEgRJo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_selection import mutual_info_classif\n",
        "\n",
        "importance = mutual_info_classif(X_train,y_train)\n",
        "feat_importance = pd.Series(importance, df.columns[0:len(df.columns)-1])\n",
        "feat_importance.plot(kind='barh', color = 'red')\n",
        "plt.show()\n",
        "feat_importance.sort_values(ascending=True)"
      ],
      "metadata": {
        "id": "YjRAOerNgVhG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 439
        },
        "outputId": "e7dfa295-50cb-4438-afdd-c2d8d6064be9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "WeightKG              0.000000\n",
              "Blood_oxygen_level    0.000000\n",
              "BodyTemp_F            0.044825\n",
              "BodyTemp_C            0.051836\n",
              "HeartRate             0.102313\n",
              "DiastolicBP           0.168512\n",
              "Age                   0.205801\n",
              "SystolicBP            0.306045\n",
              "BS                    0.324812\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As we can see that by using information gain method we get BS, SystolicBP and Age as most relevant features."
      ],
      "metadata": {
        "id": "ihYCXXK0uEfB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_ig = X_train[[X_train.columns[4],X_train.columns[2],X_train.columns[0]]]\n",
        "X_test_ig = X_test[[X_test.columns[4],X_test.columns[2],X_test.columns[0]]]\n",
        "print(X_train_ig)\n",
        "print(X_test_ig)"
      ],
      "metadata": {
        "id": "CkyuxUHCH35v",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6616a9e0-cfab-493f-90cd-397fc0ead51e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        4      2     0\n",
            "0    15.0  140.0  54.0\n",
            "1    15.0  140.0  50.0\n",
            "2     7.9  120.0  18.0\n",
            "3     7.9  135.0  38.0\n",
            "4     6.9   90.0  35.0\n",
            "..    ...    ...   ...\n",
            "704  15.0  140.0  50.0\n",
            "705   7.0  120.0  22.0\n",
            "706   6.9   90.0  17.0\n",
            "707  15.0  130.0  65.0\n",
            "708  15.0  140.0  48.0\n",
            "\n",
            "[709 rows x 3 columns]\n",
            "        4      2     0\n",
            "0     7.7  130.0  29.0\n",
            "1    15.0  140.0  30.0\n",
            "2    17.0  140.0  50.0\n",
            "3     7.5  120.0  23.0\n",
            "4     7.5  120.0  17.0\n",
            "..    ...    ...   ...\n",
            "300  16.0  130.0  50.0\n",
            "301   7.2  120.0  29.0\n",
            "302   6.7  140.0  50.0\n",
            "303  18.0  140.0  32.0\n",
            "304   7.9  120.0  23.0\n",
            "\n",
            "[305 rows x 3 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Feature Selection using **Chi-square Test**"
      ],
      "metadata": {
        "id": "BdxLuC7bjRTy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_selection import SelectKBest, SelectPercentile\n",
        "from sklearn.feature_selection import chi2\n",
        "\n",
        "# 3 best features are selected with the highest chi-squared statistics\n",
        "chi2_features = SelectKBest(chi2, k=3)\n",
        "best_features_train = chi2_features.fit_transform(X_train, y_train)\n",
        "best_features_test = chi2_features.fit_transform(X_test, y_test)\n",
        "best_features_train\n"
      ],
      "metadata": {
        "id": "QT9uEQb6jQwd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3aca3176-ad9a-43c6-93a4-1ef28cd80912"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 54. , 140. ,  15. ],\n",
              "       [ 50. , 140. ,  15. ],\n",
              "       [ 18. , 120. ,   7.9],\n",
              "       ...,\n",
              "       [ 17. ,  90. ,   6.9],\n",
              "       [ 65. , 130. ,  15. ],\n",
              "       [ 48. , 140. ,  15. ]])"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# copying and changing w.r.t chi2 result\n",
        "X_train_chi2 = X_train.copy()\n",
        "X_test_chi2 = X_test.copy()\n",
        "X_train_chi2 = best_features_train\n",
        "X_test_chi2 = best_features_test\n",
        "print(\"X_train chi2 Shape: \")\n",
        "print(X_train_chi2.shape)\n",
        "print(\"X_test  chi2 Shape: \")\n",
        "print(X_test_chi2.shape)\n",
        "X_train_chi2"
      ],
      "metadata": {
        "id": "dK-ZZl7UlvRU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "78ee679a-d728-465f-cdfb-8a2b9189726a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train chi2 Shape: \n",
            "(709, 3)\n",
            "X_test  chi2 Shape: \n",
            "(305, 3)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 54. , 140. ,  15. ],\n",
              "       [ 50. , 140. ,  15. ],\n",
              "       [ 18. , 120. ,   7.9],\n",
              "       ...,\n",
              "       [ 17. ,  90. ,   6.9],\n",
              "       [ 65. , 130. ,  15. ],\n",
              "       [ 48. , 140. ,  15. ]])"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Feature Selection using **Fisher Score (Chi-Squared)**"
      ],
      "metadata": {
        "id": "q3ClkUlWnu1L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "f_score = chi2(X_train.fillna(0), y_train)\n",
        "f_score"
      ],
      "metadata": {
        "id": "LSsJqETEnDVl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9cef9156-a9b5-4f22-b5ca-57a90b94ab5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([4.19422238e+02, 7.40273849e+00, 3.15896698e+02, 2.56421379e+02,\n",
              "        3.54000439e+02, 2.93258316e+01, 8.80647884e-03, 4.49695783e-01,\n",
              "        3.48863747e-01]),\n",
              " array([8.38722280e-92, 2.46896971e-02, 2.53456615e-69, 2.08355574e-56,\n",
              "        1.34828390e-77, 4.28525418e-07, 9.95606441e-01, 7.98637689e-01,\n",
              "        8.39934074e-01]))"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "p_values = pd.Series(f_score[1])\n",
        "p_values.index = X_train.columns\n",
        "p_values.sort_values(ascending=False)"
      ],
      "metadata": {
        "id": "fnaGmJnKoPMf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b52fb6e9-c353-468f-8202-d7f44981c88b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6    9.956064e-01\n",
              "8    8.399341e-01\n",
              "7    7.986377e-01\n",
              "1    2.468970e-02\n",
              "5    4.285254e-07\n",
              "3    2.083556e-56\n",
              "2    2.534566e-69\n",
              "4    1.348284e-77\n",
              "0    8.387223e-92\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "According to F_score \n",
        "\n",
        "1.   column 0 : AGE\n",
        "2.   column 4 : BS\n",
        "3.column 2 : SystolicBP\n",
        "\n",
        "are the most relevant features\n",
        "\n"
      ],
      "metadata": {
        "id": "eHGjIpuFpfne"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_fscore = X_train[[X_train.columns[0],X_train.columns[4],X_train.columns[2]]]\n",
        "X_test_fscore = X_test[[X_test.columns[0],X_test.columns[4],X_test.columns[2]]]\n",
        "print(X_train_fscore)\n",
        "print(X_test_fscore)"
      ],
      "metadata": {
        "id": "L6aPrDyMu1so",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b3aa79a8-54ed-4699-c5e4-a9d9d82fd6d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        0     4      2\n",
            "0    54.0  15.0  140.0\n",
            "1    50.0  15.0  140.0\n",
            "2    18.0   7.9  120.0\n",
            "3    38.0   7.9  135.0\n",
            "4    35.0   6.9   90.0\n",
            "..    ...   ...    ...\n",
            "704  50.0  15.0  140.0\n",
            "705  22.0   7.0  120.0\n",
            "706  17.0   6.9   90.0\n",
            "707  65.0  15.0  130.0\n",
            "708  48.0  15.0  140.0\n",
            "\n",
            "[709 rows x 3 columns]\n",
            "        0     4      2\n",
            "0    29.0   7.7  130.0\n",
            "1    30.0  15.0  140.0\n",
            "2    50.0  17.0  140.0\n",
            "3    23.0   7.5  120.0\n",
            "4    17.0   7.5  120.0\n",
            "..    ...   ...    ...\n",
            "300  50.0  16.0  130.0\n",
            "301  29.0   7.2  120.0\n",
            "302  50.0   6.7  140.0\n",
            "303  32.0  18.0  140.0\n",
            "304  23.0   7.9  120.0\n",
            "\n",
            "[305 rows x 3 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Wrapper Methods for Feature Selection.\n",
        "\n"
      ],
      "metadata": {
        "id": "IS7kk87Y5wuy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Forward Feature Selection**\n",
        "\n",
        "******************************************************************\n",
        "In short, the steps for the forward selection technique are as follows :\n",
        "\n",
        "1.   Choose a significance level (e.g. SL = 0.05 with a 95% confidence).\n",
        "2.   Fit all possible simple regression models by considering one feature at a time. Total ’n’ models are possible. Select the feature with the lowest p-value.\n",
        "3. Fit all possible models with one extra feature added to the previously selected feature(s).\n",
        "4. Again, select the feature with a minimum p-value. if p_value < significance level then go to Step 3, otherwise terminate the process.\n",
        "\n",
        "******************************************************************\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "IMQrds8PBcuH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def forward_selection(data, target, significance_level=0.05):\n",
        "    initial_features = data.columns.tolist()\n",
        "    best_features = []\n",
        "    target = list(target)\n",
        "    while (len(initial_features)>0):\n",
        "        remaining_features = list(set(initial_features)-set(best_features))\n",
        "        new_pval = pd.Series(index=remaining_features)\n",
        "        for new_column in remaining_features:\n",
        "            model = sm.OLS(target, sm.add_constant(data[best_features+[new_column]])).fit()\n",
        "            new_pval[new_column] = model.pvalues[new_column]\n",
        "        min_p_value = new_pval.min()\n",
        "        if(min_p_value<significance_level):\n",
        "            best_features.append(new_pval.idxmin())\n",
        "        else:\n",
        "            break\n",
        "    return best_features\n",
        "\n",
        "print(X_train.columns[list(forward_selection(X_train,y_train))])\n"
      ],
      "metadata": {
        "id": "L2GT3hcCwtO4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "80309e32-03a9-4625-b1d8-e746f099d55a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Int64Index([4, 7, 2, 5], dtype='int64')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_ffs = X_train[[X_train.columns[4],X_train.columns[7],X_train.columns[2],X_train.columns[5]]]\n",
        "X_test_ffs = X_test[[X_test.columns[4],X_test.columns[7],X_test.columns[2],X_test.columns[5]]]\n",
        "print(X_train_ffs)\n",
        "print(X_test_ffs)"
      ],
      "metadata": {
        "id": "SvP9K9wCCRG9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "14c7dc44-4a12-4907-cbdb-7bc3e481e957"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        4      7      2     5\n",
            "0    15.0   98.0  140.0  66.0\n",
            "1    15.0   98.0  140.0  90.0\n",
            "2     7.9  102.0  120.0  76.0\n",
            "3     7.9  101.0  135.0  86.0\n",
            "4     6.9   98.0   90.0  70.0\n",
            "..    ...    ...    ...   ...\n",
            "704  15.0   98.0  140.0  90.0\n",
            "705   7.0   98.0  120.0  82.0\n",
            "706   6.9  101.0   90.0  70.0\n",
            "707  15.0   98.0  130.0  86.0\n",
            "708  15.0   98.0  140.0  90.0\n",
            "\n",
            "[709 rows x 4 columns]\n",
            "        4      7      2     5\n",
            "0     7.7   98.0  130.0  78.0\n",
            "1    15.0   98.0  140.0  70.0\n",
            "2    17.0   98.0  140.0  60.0\n",
            "3     7.5   98.0  120.0  60.0\n",
            "4     7.5  102.0  120.0  76.0\n",
            "..    ...    ...    ...   ...\n",
            "300  16.0   98.0  130.0  76.0\n",
            "301   7.2  100.0  120.0  70.0\n",
            "302   6.7   98.0  140.0  70.0\n",
            "303  18.0   98.0  140.0  88.0\n",
            "304   7.9   98.0  120.0  70.0\n",
            "\n",
            "[305 rows x 4 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Backward Feature Selection**\n",
        "******************************************************************\n",
        "In short, the steps involved in backward elimination are as follows:\n",
        "\n",
        "1.   Choose a significance level (e.g. SL = 0.05 with a 95% confidence).\n",
        "2.   Fit a full model including all the features.\n",
        "3. Consider the feature with the highest p-value. If the p-value > significance level then go to Step 4, otherwise terminate the process.\n",
        "4. Remove the feature which is under consideration.\n",
        "5. Fit a model without this feature. Repeat the entire process from Step 3.\n",
        "******************************************************************"
      ],
      "metadata": {
        "id": "B2YivdtVC8l-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def backward_elimination(data, target,significance_level = 0.05):\n",
        "    features = data.columns.tolist()\n",
        "    target = list(target)\n",
        "    while(len(features)>0):\n",
        "        features_with_constant = sm.add_constant(data[features])\n",
        "        p_values = sm.OLS(target, features_with_constant).fit().pvalues[1:]\n",
        "        max_p_value = p_values.max()\n",
        "        if(max_p_value >= significance_level):\n",
        "            excluded_feature = p_values.idxmax()\n",
        "            features.remove(excluded_feature)\n",
        "        else:\n",
        "            break \n",
        "    return features\n",
        "\n",
        "\n",
        "print(X_train.columns[list(backward_elimination(X_train,y_train))])"
      ],
      "metadata": {
        "id": "lVO1-4CHDQ4w",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "faf55ecb-944d-45c6-df7e-63e2e9376109"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Int64Index([2, 4, 5, 7], dtype='int64')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_be = X_train[[X_train.columns[2],X_train.columns[4],X_train.columns[5],X_train.columns[7]]]\n",
        "X_test_be = X_test[[X_test.columns[2],X_test.columns[4],X_test.columns[5],X_test.columns[7]]]\n",
        "print(X_train_be)\n",
        "print(X_test_be)"
      ],
      "metadata": {
        "id": "PLknjINZDtwz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a37078eb-8b39-4dc9-c674-f9d2b7f85776"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "         2     4     5      7\n",
            "0    140.0  15.0  66.0   98.0\n",
            "1    140.0  15.0  90.0   98.0\n",
            "2    120.0   7.9  76.0  102.0\n",
            "3    135.0   7.9  86.0  101.0\n",
            "4     90.0   6.9  70.0   98.0\n",
            "..     ...   ...   ...    ...\n",
            "704  140.0  15.0  90.0   98.0\n",
            "705  120.0   7.0  82.0   98.0\n",
            "706   90.0   6.9  70.0  101.0\n",
            "707  130.0  15.0  86.0   98.0\n",
            "708  140.0  15.0  90.0   98.0\n",
            "\n",
            "[709 rows x 4 columns]\n",
            "         2     4     5      7\n",
            "0    130.0   7.7  78.0   98.0\n",
            "1    140.0  15.0  70.0   98.0\n",
            "2    140.0  17.0  60.0   98.0\n",
            "3    120.0   7.5  60.0   98.0\n",
            "4    120.0   7.5  76.0  102.0\n",
            "..     ...   ...   ...    ...\n",
            "300  130.0  16.0  76.0   98.0\n",
            "301  120.0   7.2  70.0  100.0\n",
            "302  140.0   6.7  70.0   98.0\n",
            "303  140.0  18.0  88.0   98.0\n",
            "304  120.0   7.9  70.0   98.0\n",
            "\n",
            "[305 rows x 4 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Machine Learning Model to compare the above feature Selection methods."
      ],
      "metadata": {
        "id": "061GlqkRE9zE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def run_randomForests(X_train, X_test, y_train, y_test):\n",
        "    rf = RandomForestClassifier(n_estimators=200, random_state=39, max_depth=4,)\n",
        "    rf.fit(X_train, y_train)\n",
        "    print('Train set')\n",
        "    pred = rf.predict_proba(X_train)\n",
        "    print('Random Forests roc-auc: {}'.format(roc_auc_score(y_train, pred ,multi_class='ovr', average = 'macro' )))\n",
        "    print('Test set')\n",
        "    pred = rf.predict_proba(X_test)\n",
        "    print('Random Forests roc-auc: {}'.format(roc_auc_score(y_test, pred, multi_class='ovr', average = 'macro' )))\n",
        " \n",
        "   "
      ],
      "metadata": {
        "id": "mH1cuJTZFOQa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Original"
      ],
      "metadata": {
        "id": "7psfpGC1HNtj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "run_randomForests(X_train_original,X_test_original,y_train,y_test)"
      ],
      "metadata": {
        "id": "Xd--W5pyHQae",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "40eed8b2-3be3-49b4-a192-51caffbc5597"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train set\n",
            "Random Forests roc-auc: 0.9151569726928289\n",
            "Test set\n",
            "Random Forests roc-auc: 0.8626098198079905\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Correlation"
      ],
      "metadata": {
        "id": "Ivop0hEVHVFO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "run_randomForests(X_train_corr,X_test_corr,y_train, y_test)"
      ],
      "metadata": {
        "id": "iGUMuCqUHlHQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "19fe4f25-4a1c-4f13-dce8-bbbc19fe5290"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train set\n",
            "Random Forests roc-auc: 0.9151837301482287\n",
            "Test set\n",
            "Random Forests roc-auc: 0.858405383435172\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Information Gain"
      ],
      "metadata": {
        "id": "zlnMekBxHtaG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "run_randomForests(X_train_ig,X_test_ig,y_train, y_test)"
      ],
      "metadata": {
        "id": "hEOFGDdyHsvv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fe7998d5-4481-4259-f3e9-015c28b016e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train set\n",
            "Random Forests roc-auc: 0.9039856812908168\n",
            "Test set\n",
            "Random Forests roc-auc: 0.8749492149132502\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Chi Squared"
      ],
      "metadata": {
        "id": "WQCZcrb9IotQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "run_randomForests(X_train_chi2,X_test_chi2,y_train, y_test)"
      ],
      "metadata": {
        "id": "FjpSAlQXItG9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3b0285ac-2767-485a-dc95-8c16d590beac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train set\n",
            "Random Forests roc-auc: 0.9069036873181048\n",
            "Test set\n",
            "Random Forests roc-auc: 0.7646146481046364\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Fisher Score (Chi2)"
      ],
      "metadata": {
        "id": "1KRNt7viI67E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "run_randomForests(X_train_fscore, X_test_fscore,y_train, y_test)"
      ],
      "metadata": {
        "id": "qfW-vX2NI5UV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1a504daa-bf99-434b-8f5f-d581622fe2dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train set\n",
            "Random Forests roc-auc: 0.9061829817382491\n",
            "Test set\n",
            "Random Forests roc-auc: 0.8733756153774467\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Forward selection"
      ],
      "metadata": {
        "id": "Q5vqlGKwJFfn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "run_randomForests(X_train_ffs,X_test_ffs,y_train, y_test)\n"
      ],
      "metadata": {
        "id": "7b8d2C2HJF3l",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cc54f832-b898-4c10-bfe1-d43df65c43b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train set\n",
            "Random Forests roc-auc: 0.9059726060606538\n",
            "Test set\n",
            "Random Forests roc-auc: 0.8659610333471311\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Backward Elimination"
      ],
      "metadata": {
        "id": "aMng7ZmVJVn2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "run_randomForests(X_train_be,X_test_be,y_train, y_test)"
      ],
      "metadata": {
        "id": "KlyEkLksJPjl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7e250cd4-ed38-4cea-8662-06c1d3ba8c25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train set\n",
            "Random Forests roc-auc: 0.9046274062432097\n",
            "Test set\n",
            "Random Forests roc-auc: 0.8654236175794966\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "id": "eYrLGukjbPFh",
        "outputId": "475fa47c-aa01-4dce-957d-022e8cdbfde3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       3\n",
              "1       3\n",
              "2       3\n",
              "3       3\n",
              "4       1\n",
              "       ..\n",
              "1009    3\n",
              "1010    3\n",
              "1011    3\n",
              "1012    3\n",
              "1013    2\n",
              "Name: RiskLevel, Length: 1014, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GLUGlYsLbFGO",
        "outputId": "642e50c4-8b1c-42ca-f6dd-f58cf689717d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    289\n",
              "2    224\n",
              "3    196\n",
              "Name: RiskLevel, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "NAIVE BAYES"
      ],
      "metadata": {
        "id": "ZMa_o9AONg_r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.metrics import confusion_matrix, plot_confusion_matrix\n",
        "classifier = GaussianNB()\n"
      ],
      "metadata": {
        "id": "LDV0YnoLMvJV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Original Data"
      ],
      "metadata": {
        "id": "3yu-QSfLN7c4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifier.fit(X_train_original, y_train)\n",
        "y_pred  =  classifier.predict(X_test_original)"
      ],
      "metadata": {
        "id": "gAOeka2bM0Eb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix,accuracy_score\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "ac = accuracy_score(y_test,y_pred)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='Blues', fmt='d', cbar=False)\n",
        "print(ac)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "hciyeJZSM_Do",
        "outputId": "6182f727-8de9-49ae-c984-ef5c7f6ff4c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5672131147540984\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Correlation"
      ],
      "metadata": {
        "id": "5-pOm_AJOGK7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifier.fit(X_train_corr, y_train)\n",
        "y_pred  =  classifier.predict(X_test_corr)\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "ac = accuracy_score(y_test,y_pred)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='Blues', fmt='d', cbar=False)\n",
        "print(ac)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "cgiqjCmrOFl4",
        "outputId": "01a40fe0-18f6-4cc4-a004-e4d0dbb6ccd9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5639344262295082\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Information Gain"
      ],
      "metadata": {
        "id": "HeIeGqo8OWqf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifier.fit(X_train_ig, y_train)\n",
        "y_pred  =  classifier.predict(X_test_ig)\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "ac = accuracy_score(y_test,y_pred)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='Blues', fmt='d', cbar=False)\n",
        "print(ac)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "1IW7pTtLOcd9",
        "outputId": "777c72bb-cb86-4d8b-aa08-8eb8b96d89db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5409836065573771\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Chi-Squared"
      ],
      "metadata": {
        "id": "AU2q0kOnOgjx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifier.fit(X_train_chi2, y_train)\n",
        "y_pred  =  classifier.predict(X_test_chi2)\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "ac = accuracy_score(y_test,y_pred)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='Blues', fmt='d', cbar=False)\n",
        "print(ac)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "_J0UVHg-OluI",
        "outputId": "bd4f544b-71c2-4b21-fb4d-b2d543553e9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.25901639344262295\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Fisher Score (Chi2)"
      ],
      "metadata": {
        "id": "naESDwU0PdNW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifier.fit(X_train_fscore, y_train)\n",
        "y_pred  =  classifier.predict(X_test_fscore)\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "ac = accuracy_score(y_test,y_pred)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='Blues', fmt='d', cbar=False)\n",
        "print(ac)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "a9HBfiPlPb_i",
        "outputId": "63fe7557-bf74-42c7-8d22-74bcd00e6366"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5409836065573771\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Forward Selection"
      ],
      "metadata": {
        "id": "_15Kk95-PnEw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifier.fit(X_train_ffs, y_train)\n",
        "y_pred  =  classifier.predict(X_test_ffs)\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "ac = accuracy_score(y_test,y_pred)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='Blues', fmt='d', cbar=False)\n",
        "print(ac)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "BpwKGOKcPul5",
        "outputId": "0a948cda-2272-4f9e-ccfb-ca4abfb1df6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5606557377049181\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Backward Elimination"
      ],
      "metadata": {
        "id": "u9_oH9-8PzAd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classifier.fit(X_train_be, y_train)\n",
        "y_pred  =  classifier.predict(X_test_be)\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "ac = accuracy_score(y_test,y_pred)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='Blues', fmt='d', cbar=False)\n",
        "print(ac)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "1Yna1gr_P4z4",
        "outputId": "0d1134de-aa75-44e4-c31f-63cc62bd48e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5606557377049181\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Support Vector Machine"
      ],
      "metadata": {
        "id": "5FUtyAO_QTrT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Original"
      ],
      "metadata": {
        "id": "6aVjx5GsQWYN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "svclassifier = SVC(kernel='linear')\n",
        "svclassifier.fit(X_train_original, y_train)\n",
        "y_pred = svclassifier.predict(X_test_original)\n",
        "\n",
        "\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fx9N9E9gQTHw",
        "outputId": "73efcc83-cec5-44c0-981f-4b501edb6996"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[105   8   4]\n",
            " [ 64  34  14]\n",
            " [  7  13  56]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.60      0.90      0.72       117\n",
            "           2       0.62      0.30      0.41       112\n",
            "           3       0.76      0.74      0.75        76\n",
            "\n",
            "    accuracy                           0.64       305\n",
            "   macro avg       0.66      0.65      0.62       305\n",
            "weighted avg       0.64      0.64      0.61       305\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Correlation"
      ],
      "metadata": {
        "id": "2-f1MsjBTD0J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "svclassifier = SVC(kernel='linear')\n",
        "svclassifier.fit(X_train_corr, y_train)\n",
        "y_pred = svclassifier.predict(X_test_corr)\n",
        "\n",
        "\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6aJljzO1Q-bK",
        "outputId": "cce3fcec-bfba-4ad8-9da5-8cdf7a6dac28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[105   8   4]\n",
            " [ 66  32  14]\n",
            " [  7  13  56]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.59      0.90      0.71       117\n",
            "           2       0.60      0.29      0.39       112\n",
            "           3       0.76      0.74      0.75        76\n",
            "\n",
            "    accuracy                           0.63       305\n",
            "   macro avg       0.65      0.64      0.62       305\n",
            "weighted avg       0.64      0.63      0.60       305\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Information Gain"
      ],
      "metadata": {
        "id": "C2El-KSkTGyP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "svclassifier = SVC(kernel='linear')\n",
        "svclassifier.fit(X_train_ig, y_train)\n",
        "y_pred = svclassifier.predict(X_test_ig)\n",
        "\n",
        "\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5JbbTuXjSlJB",
        "outputId": "0055b30b-0ab7-422f-bf81-40f256e44373"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[115   0   2]\n",
            " [102   0  10]\n",
            " [ 29   0  47]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.47      0.98      0.63       117\n",
            "           2       0.00      0.00      0.00       112\n",
            "           3       0.80      0.62      0.70        76\n",
            "\n",
            "    accuracy                           0.53       305\n",
            "   macro avg       0.42      0.53      0.44       305\n",
            "weighted avg       0.38      0.53      0.42       305\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Chi-Squared"
      ],
      "metadata": {
        "id": "lPFAV7rdTM4e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "svclassifier = SVC(kernel='linear')\n",
        "svclassifier.fit(X_train_chi2, y_train)\n",
        "y_pred = svclassifier.predict(X_test_chi2)\n",
        "\n",
        "\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lxOoXnYNSrEH",
        "outputId": "ddc0b9d9-ec7e-4d25-fd67-427c9dbc5d03"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[115   0   2]\n",
            " [102   0  10]\n",
            " [ 29   0  47]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.47      0.98      0.63       117\n",
            "           2       0.00      0.00      0.00       112\n",
            "           3       0.80      0.62      0.70        76\n",
            "\n",
            "    accuracy                           0.53       305\n",
            "   macro avg       0.42      0.53      0.44       305\n",
            "weighted avg       0.38      0.53      0.42       305\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Fisher Score"
      ],
      "metadata": {
        "id": "6Vl3T2ZBTPDO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "svclassifier = SVC(kernel='linear')\n",
        "svclassifier.fit(X_train_fscore, y_train)\n",
        "y_pred = svclassifier.predict(X_test_fscore)\n",
        "\n",
        "\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mPlY1mNySz_x",
        "outputId": "4711761d-f88a-4a1f-d43f-99dad8d217e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[115   0   2]\n",
            " [102   0  10]\n",
            " [ 29   0  47]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.47      0.98      0.63       117\n",
            "           2       0.00      0.00      0.00       112\n",
            "           3       0.80      0.62      0.70        76\n",
            "\n",
            "    accuracy                           0.53       305\n",
            "   macro avg       0.42      0.53      0.44       305\n",
            "weighted avg       0.38      0.53      0.42       305\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Forward Selection"
      ],
      "metadata": {
        "id": "jjdz-1ZwTT0w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "svclassifier = SVC(kernel='linear')\n",
        "svclassifier.fit(X_train_ffs, y_train)\n",
        "y_pred = svclassifier.predict(X_test_ffs)\n",
        "\n",
        "\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LBmDJrQuS4kZ",
        "outputId": "ebe993c6-5be2-4f96-b9eb-6256bf462351"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[108   7   2]\n",
            " [ 81  19  12]\n",
            " [ 16  12  48]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.53      0.92      0.67       117\n",
            "           2       0.50      0.17      0.25       112\n",
            "           3       0.77      0.63      0.70        76\n",
            "\n",
            "    accuracy                           0.57       305\n",
            "   macro avg       0.60      0.57      0.54       305\n",
            "weighted avg       0.58      0.57      0.52       305\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Backward Elimination"
      ],
      "metadata": {
        "id": "gMH2p8AlTXSx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "svclassifier = SVC(kernel='linear')\n",
        "svclassifier.fit(X_train_be, y_train)\n",
        "y_pred = svclassifier.predict(X_test_be)\n",
        "\n",
        "\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E5XKN5kXS9ML",
        "outputId": "6b804ea9-3384-4934-e39a-19059212720c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[108   7   2]\n",
            " [ 81  19  12]\n",
            " [ 16  12  48]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.53      0.92      0.67       117\n",
            "           2       0.50      0.17      0.25       112\n",
            "           3       0.77      0.63      0.70        76\n",
            "\n",
            "    accuracy                           0.57       305\n",
            "   macro avg       0.60      0.57      0.54       305\n",
            "weighted avg       0.58      0.57      0.52       305\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Logistic Regression"
      ],
      "metadata": {
        "id": "WbnQziZE6UJ0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Orignal Data"
      ],
      "metadata": {
        "id": "O_3gZjr9SLYM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lrc = LogisticRegression(random_state=0)\n",
        "lrc.fit(X_train_original, y_train)\n",
        "y_pred  =  lrc.predict(X_test_original)\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "ac = accuracy_score(y_test,y_pred)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='Blues', fmt='d', cbar=False)\n",
        "print(ac)"
      ],
      "metadata": {
        "id": "bluSXc_xRmBG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "58032065-1c5a-4d96-9382-dabf060296c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.6196721311475409\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Correlation"
      ],
      "metadata": {
        "id": "eKuIP-smUeSg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lrc = LogisticRegression(random_state=0)\n",
        "lrc.fit(X_train_corr, y_train)\n",
        "y_pred  =  lrc.predict(X_test_corr)\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))\n",
        "\n",
        "y_pred_train  =  lrc.predict(X_train_corr)\n",
        "print(confusion_matrix(y_train,y_pred_train))\n",
        "print(classification_report(y_train,y_pred_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HeWKC1rXgusb",
        "outputId": "467a702a-05c6-4e7b-ffcd-1c2acdf19e59"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[103  12   2]\n",
            " [ 68  34  10]\n",
            " [ 17   6  53]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.55      0.88      0.68       117\n",
            "           2       0.65      0.30      0.41       112\n",
            "           3       0.82      0.70      0.75        76\n",
            "\n",
            "    accuracy                           0.62       305\n",
            "   macro avg       0.67      0.63      0.61       305\n",
            "weighted avg       0.65      0.62      0.60       305\n",
            "\n",
            "[[237  41  11]\n",
            " [135  64  25]\n",
            " [ 44  21 131]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.57      0.82      0.67       289\n",
            "           2       0.51      0.29      0.37       224\n",
            "           3       0.78      0.67      0.72       196\n",
            "\n",
            "    accuracy                           0.61       709\n",
            "   macro avg       0.62      0.59      0.59       709\n",
            "weighted avg       0.61      0.61      0.59       709\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Information Gain"
      ],
      "metadata": {
        "id": "oTtapzX_U0xh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lrc = LogisticRegression(random_state=0)\n",
        "lrc.fit(X_train_ig, y_train)\n",
        "y_pred  =  lrc.predict(X_test_ig)\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))\n",
        "\n",
        "y_pred_train  =  lrc.predict(X_train_ig)\n",
        "print(confusion_matrix(y_train,y_pred_train))\n",
        "print(classification_report(y_train,y_pred_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9VKHouHRhPeQ",
        "outputId": "c8e0c7cd-1e4c-4aeb-b979-84db5b48125d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[101  14   2]\n",
            " [ 86  16  10]\n",
            " [ 13  16  47]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.51      0.86      0.64       117\n",
            "           2       0.35      0.14      0.20       112\n",
            "           3       0.80      0.62      0.70        76\n",
            "\n",
            "    accuracy                           0.54       305\n",
            "   macro avg       0.55      0.54      0.51       305\n",
            "weighted avg       0.52      0.54      0.49       305\n",
            "\n",
            "[[233  54   2]\n",
            " [163  39  22]\n",
            " [ 31  43 122]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.55      0.81      0.65       289\n",
            "           2       0.29      0.17      0.22       224\n",
            "           3       0.84      0.62      0.71       196\n",
            "\n",
            "    accuracy                           0.56       709\n",
            "   macro avg       0.56      0.53      0.53       709\n",
            "weighted avg       0.54      0.56      0.53       709\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Chi-Squared"
      ],
      "metadata": {
        "id": "1wQJPZ3fVLG6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lrc = LogisticRegression(random_state=0)\n",
        "lrc.fit(X_train_chi2, y_train)\n",
        "y_pred  =  lrc.predict(X_test_chi2)\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))\n",
        "\n",
        "y_pred_train  =  lrc.predict(X_train_chi2)\n",
        "print(confusion_matrix(y_train,y_pred_train))\n",
        "print(classification_report(y_train,y_pred_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N9Zs7k1Ohbix",
        "outputId": "e6dd27a7-c423-4a27-fb64-ec847ce6c065"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[115   2   0]\n",
            " [102   6   4]\n",
            " [ 30  26  20]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.47      0.98      0.63       117\n",
            "           2       0.18      0.05      0.08       112\n",
            "           3       0.83      0.26      0.40        76\n",
            "\n",
            "    accuracy                           0.46       305\n",
            "   macro avg       0.49      0.43      0.37       305\n",
            "weighted avg       0.45      0.46      0.37       305\n",
            "\n",
            "[[233  54   2]\n",
            " [163  39  22]\n",
            " [ 31  43 122]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.55      0.81      0.65       289\n",
            "           2       0.29      0.17      0.22       224\n",
            "           3       0.84      0.62      0.71       196\n",
            "\n",
            "    accuracy                           0.56       709\n",
            "   macro avg       0.56      0.53      0.53       709\n",
            "weighted avg       0.54      0.56      0.53       709\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Fisher* Score (Chi2)"
      ],
      "metadata": {
        "id": "FPkSsLUqhkf9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lrc = LogisticRegression(random_state=0)\n",
        "lrc.fit(X_train_fscore, y_train)\n",
        "y_pred  =  lrc.predict(X_test_fscore)\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))\n",
        "\n",
        "y_pred_train  =  lrc.predict(X_train_fscore)\n",
        "print(confusion_matrix(y_train,y_pred_train))\n",
        "print(classification_report(y_train,y_pred_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fOtSLWymhoVy",
        "outputId": "6d4511cf-c66f-4a70-c924-7652d2fada4a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[101  14   2]\n",
            " [ 86  16  10]\n",
            " [ 13  16  47]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.51      0.86      0.64       117\n",
            "           2       0.35      0.14      0.20       112\n",
            "           3       0.80      0.62      0.70        76\n",
            "\n",
            "    accuracy                           0.54       305\n",
            "   macro avg       0.55      0.54      0.51       305\n",
            "weighted avg       0.52      0.54      0.49       305\n",
            "\n",
            "[[233  54   2]\n",
            " [163  39  22]\n",
            " [ 31  43 122]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.55      0.81      0.65       289\n",
            "           2       0.29      0.17      0.22       224\n",
            "           3       0.84      0.62      0.71       196\n",
            "\n",
            "    accuracy                           0.56       709\n",
            "   macro avg       0.56      0.53      0.53       709\n",
            "weighted avg       0.54      0.56      0.53       709\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Forward Selection"
      ],
      "metadata": {
        "id": "Ddl7PnIqhvoM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lrc = LogisticRegression(random_state=0)\n",
        "lrc.fit(X_train_ffs, y_train)\n",
        "y_pred  =  lrc.predict(X_test_ffs)\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))\n",
        "\n",
        "y_pred_train  =  lrc.predict(X_train_ffs)\n",
        "print(confusion_matrix(y_train,y_pred_train))\n",
        "print(classification_report(y_train,y_pred_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M7gKs6ndhxo3",
        "outputId": "93bb64ab-d34a-4598-b8b8-96170d75cb3a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[107   8   2]\n",
            " [ 86  16  10]\n",
            " [ 14  15  47]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.52      0.91      0.66       117\n",
            "           2       0.41      0.14      0.21       112\n",
            "           3       0.80      0.62      0.70        76\n",
            "\n",
            "    accuracy                           0.56       305\n",
            "   macro avg       0.57      0.56      0.52       305\n",
            "weighted avg       0.55      0.56      0.50       305\n",
            "\n",
            "[[254  33   2]\n",
            " [157  45  22]\n",
            " [ 37  39 120]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.57      0.88      0.69       289\n",
            "           2       0.38      0.20      0.26       224\n",
            "           3       0.83      0.61      0.71       196\n",
            "\n",
            "    accuracy                           0.59       709\n",
            "   macro avg       0.59      0.56      0.55       709\n",
            "weighted avg       0.58      0.59      0.56       709\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Backward Elimination"
      ],
      "metadata": {
        "id": "7E2ilyLDiO38"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lrc = LogisticRegression(random_state=0)\n",
        "lrc.fit(X_train_be, y_train)\n",
        "y_pred  =  lrc.predict(X_test_be)\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))\n",
        "\n",
        "y_pred_train  =  lrc.predict(X_train_be)\n",
        "print(confusion_matrix(y_train,y_pred_train))\n",
        "print(classification_report(y_train,y_pred_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zm3cM7cXiQdD",
        "outputId": "e6eaeac6-9604-49b6-afeb-b9536c47f334"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[107   8   2]\n",
            " [ 86  16  10]\n",
            " [ 14  15  47]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.52      0.91      0.66       117\n",
            "           2       0.41      0.14      0.21       112\n",
            "           3       0.80      0.62      0.70        76\n",
            "\n",
            "    accuracy                           0.56       305\n",
            "   macro avg       0.57      0.56      0.52       305\n",
            "weighted avg       0.55      0.56      0.50       305\n",
            "\n",
            "[[254  33   2]\n",
            " [157  45  22]\n",
            " [ 34  42 120]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.57      0.88      0.69       289\n",
            "           2       0.38      0.20      0.26       224\n",
            "           3       0.83      0.61      0.71       196\n",
            "\n",
            "    accuracy                           0.59       709\n",
            "   macro avg       0.59      0.56      0.55       709\n",
            "weighted avg       0.58      0.59      0.56       709\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Decision Tree"
      ],
      "metadata": {
        "id": "I4CDBrPPVXFg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "rIDgtgeIhjrg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Orignal Data"
      ],
      "metadata": {
        "id": "rTkIiTeUVixL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "decision = DecisionTreeClassifier(criterion='entropy').fit(X_train_original, y_train)\n",
        "y_pred  =  decision.predict(X_test_original)\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "ac = accuracy_score(y_test,y_pred)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='Blues', fmt='d', cbar=False)\n",
        "print(ac)\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 508
        },
        "id": "AdQpkC2WVaJR",
        "outputId": "b11b438b-cb7b-46ed-82c0-43653410308f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.7213114754098361\n",
            "[[86 26  5]\n",
            " [29 73 10]\n",
            " [ 2 13 61]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.74      0.74      0.74       117\n",
            "           2       0.65      0.65      0.65       112\n",
            "           3       0.80      0.80      0.80        76\n",
            "\n",
            "    accuracy                           0.72       305\n",
            "   macro avg       0.73      0.73      0.73       305\n",
            "weighted avg       0.72      0.72      0.72       305\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Correlation"
      ],
      "metadata": {
        "id": "WmTnWeQFV-xp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "decision = DecisionTreeClassifier(criterion='entropy').fit(X_train_corr, y_train)\n",
        "\n",
        "y_pred  =  decision.predict(X_test_corr)\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))\n",
        "\n",
        "y_pred_train  =  decision.predict(X_train_corr)\n",
        "print(confusion_matrix(y_train,y_pred_train))\n",
        "print(classification_report(y_train,y_pred_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X_BM6eE_WAOo",
        "outputId": "e8749b7d-62ba-407b-8cea-02e828df2215"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[83 28  6]\n",
            " [32 71  9]\n",
            " [ 3  9 64]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.70      0.71      0.71       117\n",
            "           2       0.66      0.63      0.65       112\n",
            "           3       0.81      0.84      0.83        76\n",
            "\n",
            "    accuracy                           0.71       305\n",
            "   macro avg       0.72      0.73      0.73       305\n",
            "weighted avg       0.71      0.71      0.71       305\n",
            "\n",
            "[[289   0   0]\n",
            " [  0 224   0]\n",
            " [  0   0 196]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       1.00      1.00      1.00       289\n",
            "           2       1.00      1.00      1.00       224\n",
            "           3       1.00      1.00      1.00       196\n",
            "\n",
            "    accuracy                           1.00       709\n",
            "   macro avg       1.00      1.00      1.00       709\n",
            "weighted avg       1.00      1.00      1.00       709\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Information Gain"
      ],
      "metadata": {
        "id": "9uU0BAEziaIy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "decision = DecisionTreeClassifier(criterion='entropy').fit(X_train_ig, y_train)\n",
        "\n",
        "y_pred  =  decision.predict(X_test_ig)\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))\n",
        "\n",
        "y_pred_train  =  decision.predict(X_train_ig)\n",
        "print(confusion_matrix(y_train,y_pred_train))\n",
        "print(classification_report(y_train,y_pred_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jdo40jmBi2vs",
        "outputId": "9bd094d5-3da5-448c-d8b0-59fd20c8eb56"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[96 16  5]\n",
            " [21 85  6]\n",
            " [ 1  7 68]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.81      0.82      0.82       117\n",
            "           2       0.79      0.76      0.77       112\n",
            "           3       0.86      0.89      0.88        76\n",
            "\n",
            "    accuracy                           0.82       305\n",
            "   macro avg       0.82      0.82      0.82       305\n",
            "weighted avg       0.82      0.82      0.82       305\n",
            "\n",
            "[[264  23   2]\n",
            " [ 20 194  10]\n",
            " [  3   4 189]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.92      0.91      0.92       289\n",
            "           2       0.88      0.87      0.87       224\n",
            "           3       0.94      0.96      0.95       196\n",
            "\n",
            "    accuracy                           0.91       709\n",
            "   macro avg       0.91      0.91      0.91       709\n",
            "weighted avg       0.91      0.91      0.91       709\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Chi-Squared"
      ],
      "metadata": {
        "id": "RL4710amjHIt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "decision = DecisionTreeClassifier(criterion='entropy').fit(X_train_chi2, y_train)\n",
        "\n",
        "y_pred  =  decision.predict(X_test_chi2)\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))\n",
        "\n",
        "y_pred_train  =  decision.predict(X_train_chi2)\n",
        "print(confusion_matrix(y_train,y_pred_train))\n",
        "print(classification_report(y_train,y_pred_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3Mamcvl5jIv2",
        "outputId": "ac2a68c5-7d8e-434f-ae3f-6c34e7a87b12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[94 13 10]\n",
            " [72 32  8]\n",
            " [19 16 41]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.51      0.80      0.62       117\n",
            "           2       0.52      0.29      0.37       112\n",
            "           3       0.69      0.54      0.61        76\n",
            "\n",
            "    accuracy                           0.55       305\n",
            "   macro avg       0.58      0.54      0.53       305\n",
            "weighted avg       0.56      0.55      0.53       305\n",
            "\n",
            "[[264  23   2]\n",
            " [ 20 194  10]\n",
            " [  3   4 189]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.92      0.91      0.92       289\n",
            "           2       0.88      0.87      0.87       224\n",
            "           3       0.94      0.96      0.95       196\n",
            "\n",
            "    accuracy                           0.91       709\n",
            "   macro avg       0.91      0.91      0.91       709\n",
            "weighted avg       0.91      0.91      0.91       709\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Fisher* Score (Chi2)\n"
      ],
      "metadata": {
        "id": "kYGNPQ-EjOWK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "decision = DecisionTreeClassifier(criterion='entropy').fit(X_train_fscore, y_train)\n",
        "\n",
        "y_pred  =  decision.predict(X_test_fscore)\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))\n",
        "\n",
        "y_pred_train  =  decision.predict(X_train_fscore)\n",
        "print(confusion_matrix(y_train,y_pred_train))\n",
        "print(classification_report(y_train,y_pred_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CDfNs7a9jQnq",
        "outputId": "90d77f2e-64ec-42c1-dd7c-ee069e41e914"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[94 16  7]\n",
            " [21 85  6]\n",
            " [ 2  7 67]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.80      0.80      0.80       117\n",
            "           2       0.79      0.76      0.77       112\n",
            "           3       0.84      0.88      0.86        76\n",
            "\n",
            "    accuracy                           0.81       305\n",
            "   macro avg       0.81      0.81      0.81       305\n",
            "weighted avg       0.81      0.81      0.81       305\n",
            "\n",
            "[[264  23   2]\n",
            " [ 20 194  10]\n",
            " [  3   4 189]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.92      0.91      0.92       289\n",
            "           2       0.88      0.87      0.87       224\n",
            "           3       0.94      0.96      0.95       196\n",
            "\n",
            "    accuracy                           0.91       709\n",
            "   macro avg       0.91      0.91      0.91       709\n",
            "weighted avg       0.91      0.91      0.91       709\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Forward Selection"
      ],
      "metadata": {
        "id": "yeBx1Tu8jWTM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "decision = DecisionTreeClassifier(criterion='entropy').fit(X_train_ffs, y_train)\n",
        "\n",
        "y_pred  =  decision.predict(X_test_ffs)\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))\n",
        "\n",
        "y_pred_train  =  decision.predict(X_train_ffs)\n",
        "print(confusion_matrix(y_train,y_pred_train))\n",
        "print(classification_report(y_train,y_pred_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bnyKDshOjZna",
        "outputId": "fd9d3760-2df8-4433-c268-73cb5f395af7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[89 25  3]\n",
            " [22 81  9]\n",
            " [ 3  8 65]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.78      0.76      0.77       117\n",
            "           2       0.71      0.72      0.72       112\n",
            "           3       0.84      0.86      0.85        76\n",
            "\n",
            "    accuracy                           0.77       305\n",
            "   macro avg       0.78      0.78      0.78       305\n",
            "weighted avg       0.77      0.77      0.77       305\n",
            "\n",
            "[[271  16   2]\n",
            " [ 27 189   8]\n",
            " [  5   5 186]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.89      0.94      0.92       289\n",
            "           2       0.90      0.84      0.87       224\n",
            "           3       0.95      0.95      0.95       196\n",
            "\n",
            "    accuracy                           0.91       709\n",
            "   macro avg       0.91      0.91      0.91       709\n",
            "weighted avg       0.91      0.91      0.91       709\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Backward Elimination"
      ],
      "metadata": {
        "id": "d4PE42FZjjnZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "decision = DecisionTreeClassifier(criterion='entropy').fit(X_train_be, y_train)\n",
        "\n",
        "y_pred  =  decision.predict(X_test_be)\n",
        "print(confusion_matrix(y_test,y_pred))\n",
        "print(classification_report(y_test,y_pred))\n",
        "\n",
        "y_pred_train  =  decision.predict(X_train_be)\n",
        "print(confusion_matrix(y_train,y_pred_train))\n",
        "print(classification_report(y_train,y_pred_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "onMXpb4kjlik",
        "outputId": "1d0086e8-afcf-4ec7-a711-ffb8e473a05a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[89 25  3]\n",
            " [22 81  9]\n",
            " [ 3  8 65]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.78      0.76      0.77       117\n",
            "           2       0.71      0.72      0.72       112\n",
            "           3       0.84      0.86      0.85        76\n",
            "\n",
            "    accuracy                           0.77       305\n",
            "   macro avg       0.78      0.78      0.78       305\n",
            "weighted avg       0.77      0.77      0.77       305\n",
            "\n",
            "[[271  16   2]\n",
            " [ 27 189   8]\n",
            " [  5   5 186]]\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.89      0.94      0.92       289\n",
            "           2       0.90      0.84      0.87       224\n",
            "           3       0.95      0.95      0.95       196\n",
            "\n",
            "    accuracy                           0.91       709\n",
            "   macro avg       0.91      0.91      0.91       709\n",
            "weighted avg       0.91      0.91      0.91       709\n",
            "\n"
          ]
        }
      ]
    }
  ]
}